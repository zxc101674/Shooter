//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scenes/Game/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Hero"",
            ""id"": ""ae21e1f9-b513-4e22-8275-8cf68d0b106f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1814146d-a969-426e-82e1-11145745622c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Activate"",
                    ""type"": ""Button"",
                    ""id"": ""80857c59-2fac-4d91-881d-a1cd3741a2fd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b51bab69-0a1b-4797-9e1e-d5c947d09335"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""99b7d478-3ec7-4a18-b18c-347f29bab916"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""63bd7def-72c8-40ba-b1d7-19501bd32208"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""aebbc88f-30cf-4cf1-abb5-8edd9b786b7d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d56f1bca-6539-4086-9b1c-158079ca755b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""56cd8012-1307-4511-8b15-85be4afc0521"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Activate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Skills"",
            ""id"": ""1ed905ec-c28d-47ce-9c41-d899eb49e0ef"",
            ""actions"": [
                {
                    ""name"": ""ActivateDrons"",
                    ""type"": ""Button"",
                    ""id"": ""0b46a373-06e9-48fc-8f65-7068482dda6a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpawnMine"",
                    ""type"": ""Button"",
                    ""id"": ""cc3a7ecd-5faa-408c-8a7d-ee9202b6a7e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpawnTower"",
                    ""type"": ""Button"",
                    ""id"": ""d72c4bca-6a05-4976-bf53-3bb39cce4468"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f237a895-3b37-448b-b749-b8f90b86b12f"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ActivateDrons"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""856c60b8-b395-4fd4-a0e6-f9a6835abd9d"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpawnMine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""130949c2-a2b0-43ad-8768-13a71d15a8ae"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SpawnTower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Hero
        m_Hero = asset.FindActionMap("Hero", throwIfNotFound: true);
        m_Hero_Move = m_Hero.FindAction("Move", throwIfNotFound: true);
        m_Hero_Activate = m_Hero.FindAction("Activate", throwIfNotFound: true);
        // Skills
        m_Skills = asset.FindActionMap("Skills", throwIfNotFound: true);
        m_Skills_ActivateDrons = m_Skills.FindAction("ActivateDrons", throwIfNotFound: true);
        m_Skills_SpawnMine = m_Skills.FindAction("SpawnMine", throwIfNotFound: true);
        m_Skills_SpawnTower = m_Skills.FindAction("SpawnTower", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Hero
    private readonly InputActionMap m_Hero;
    private List<IHeroActions> m_HeroActionsCallbackInterfaces = new List<IHeroActions>();
    private readonly InputAction m_Hero_Move;
    private readonly InputAction m_Hero_Activate;
    public struct HeroActions
    {
        private @InputActions m_Wrapper;
        public HeroActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Hero_Move;
        public InputAction @Activate => m_Wrapper.m_Hero_Activate;
        public InputActionMap Get() { return m_Wrapper.m_Hero; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HeroActions set) { return set.Get(); }
        public void AddCallbacks(IHeroActions instance)
        {
            if (instance == null || m_Wrapper.m_HeroActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HeroActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Activate.started += instance.OnActivate;
            @Activate.performed += instance.OnActivate;
            @Activate.canceled += instance.OnActivate;
        }

        private void UnregisterCallbacks(IHeroActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Activate.started -= instance.OnActivate;
            @Activate.performed -= instance.OnActivate;
            @Activate.canceled -= instance.OnActivate;
        }

        public void RemoveCallbacks(IHeroActions instance)
        {
            if (m_Wrapper.m_HeroActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHeroActions instance)
        {
            foreach (var item in m_Wrapper.m_HeroActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HeroActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HeroActions @Hero => new HeroActions(this);

    // Skills
    private readonly InputActionMap m_Skills;
    private List<ISkillsActions> m_SkillsActionsCallbackInterfaces = new List<ISkillsActions>();
    private readonly InputAction m_Skills_ActivateDrons;
    private readonly InputAction m_Skills_SpawnMine;
    private readonly InputAction m_Skills_SpawnTower;
    public struct SkillsActions
    {
        private @InputActions m_Wrapper;
        public SkillsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ActivateDrons => m_Wrapper.m_Skills_ActivateDrons;
        public InputAction @SpawnMine => m_Wrapper.m_Skills_SpawnMine;
        public InputAction @SpawnTower => m_Wrapper.m_Skills_SpawnTower;
        public InputActionMap Get() { return m_Wrapper.m_Skills; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SkillsActions set) { return set.Get(); }
        public void AddCallbacks(ISkillsActions instance)
        {
            if (instance == null || m_Wrapper.m_SkillsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SkillsActionsCallbackInterfaces.Add(instance);
            @ActivateDrons.started += instance.OnActivateDrons;
            @ActivateDrons.performed += instance.OnActivateDrons;
            @ActivateDrons.canceled += instance.OnActivateDrons;
            @SpawnMine.started += instance.OnSpawnMine;
            @SpawnMine.performed += instance.OnSpawnMine;
            @SpawnMine.canceled += instance.OnSpawnMine;
            @SpawnTower.started += instance.OnSpawnTower;
            @SpawnTower.performed += instance.OnSpawnTower;
            @SpawnTower.canceled += instance.OnSpawnTower;
        }

        private void UnregisterCallbacks(ISkillsActions instance)
        {
            @ActivateDrons.started -= instance.OnActivateDrons;
            @ActivateDrons.performed -= instance.OnActivateDrons;
            @ActivateDrons.canceled -= instance.OnActivateDrons;
            @SpawnMine.started -= instance.OnSpawnMine;
            @SpawnMine.performed -= instance.OnSpawnMine;
            @SpawnMine.canceled -= instance.OnSpawnMine;
            @SpawnTower.started -= instance.OnSpawnTower;
            @SpawnTower.performed -= instance.OnSpawnTower;
            @SpawnTower.canceled -= instance.OnSpawnTower;
        }

        public void RemoveCallbacks(ISkillsActions instance)
        {
            if (m_Wrapper.m_SkillsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISkillsActions instance)
        {
            foreach (var item in m_Wrapper.m_SkillsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SkillsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SkillsActions @Skills => new SkillsActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IHeroActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnActivate(InputAction.CallbackContext context);
    }
    public interface ISkillsActions
    {
        void OnActivateDrons(InputAction.CallbackContext context);
        void OnSpawnMine(InputAction.CallbackContext context);
        void OnSpawnTower(InputAction.CallbackContext context);
    }
}
